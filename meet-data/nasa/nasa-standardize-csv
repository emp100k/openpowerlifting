#!/usr/bin/env python3
# vim: set ts=8 sts=4 et sw=4 tw=99:
#
# Standardizes a new-style NASA document,
# which contains lots of garbage.
# The CSV is first generated by running the PDF through Tabula,
# being careful to over-estimate the bounds of the tables.
#

from oplcsv import Csv
import sys


def error(msg):
    print(msg, file=sys.stderr)
    sys.exit(1)


# Aggregate a bunch of columns that just report division information.
def aggregate_divisions(csv):
    csv.append_column("Division")
    dividx = csv.index('Division')

    cols = ['Meet','Bench','Power','Uequip','PP U','PP','P Press']

    for col in cols:
        if col in csv.fieldnames:
            idx = csv.index(col)
            for row in csv.rows:
                if row[idx]:
                    row[dividx] = row[idx]

    for col in cols:
        csv.remove_column_by_name(col)


def capitalize(csv, field):
    idx = csv.index(field)

    for row in csv.rows:
        if row[idx]:
            row[idx] = row[idx].upper()


def rename_fields(csv):
    for i,field in enumerate(csv.fieldnames):
        if field == 'Pl.':
            csv.fieldnames[i] = 'Place'
        elif field == 'Wt.Cl.':
            csv.fieldnames[i] = 'WeightClassLBS'
        elif field == 'St.':
            csv.fieldnames[i] = 'State'
        elif field == 'B.W.T':
            csv.fieldnames[i] = 'BodyweightLBS'
        elif field == 'Best SQ':
            csv.fieldnames[i] = 'BestSquatKg'
        elif field == 'Best BP':
            csv.fieldnames[i] = 'BestBenchKg'
        elif field == 'Best DL':
            csv.fieldnames[i] = 'BestDeadliftKg'
        elif field == 'TL Kgs':
            csv.fieldnames[i] = 'TotalKg'
        elif field == 'SQ-4ar':
            csv.fieldnames[i] = 'Squat4Kg'
        elif field == 'BP-4ar':
            csv.fieldnames[i] = 'Bench4Kg'
        elif field == 'DL-4ar':
            csv.fieldnames[i] = 'Deadlift4Kg'
        elif field == 'Name':
            pass
        elif field == 'Sex':
            pass
        elif field == 'Division':
            pass
        else:
            error("Unknown fieldname: \"%s\"" % field)


# The column names appear again and again.
def remove_restated_column_rows(csv):
    def find_such_a_row(csv):
        for i,row in enumerate(csv.rows):
            if ',Name,' in ','.join(row):
                return i
        return -1

    while True:
        i = find_such_a_row(csv)
        if i == -1:
            return
        del csv.rows[i]


def remove_empty_rows(csv):
    def find_such_a_row(csv):
        for i,row in enumerate(csv.rows):
            if not ''.join(row):
                return i
        return -1

    while True:
        i = find_such_a_row(csv)
        if i == -1:
            return
        del csv.rows[i]


# The equipment and event show up in control rows, such as "Uneq BP".
# These are in the Name column.
def integrate_equipment_event(csv):
    csv.append_column('Event')
    csv.append_column('Equipment')

    eventidx = csv.index('Event')
    equipmentidx = csv.index('Equipment')
    nameidx = csv.index('Name')
    wtidx = csv.index('WeightClassLBS')

    event = None
    equipment = None

    for row in csv.rows:
        # Detect category rows.
        if row[nameidx] and not row[wtidx]:
            category = ''.join(row)

            if 'Equipped PL' in category:
                event = 'SBD'
                equipment = 'Single-ply'
            elif 'Uneq PL' in category or category == 'Uneq HS PL' \
                 or category == 'Uneq Powerlifting' or category == 'Unequipped PL':
                event = 'SBD'
                equipment = 'Raw'
            elif 'Power' in category and 'ports' in category: # Curl-Squat-Bench-Deadlift. Unknown.
                event = ''
                equipment = 'Raw'
            elif 'Equipped BP' in category:
                event = 'B'
                equipment = 'Single-ply'
            elif 'Uneq BP' in category:
                event = 'B'
                equipment = 'Raw'
            elif 'Uneq PP' in category \
                 or 'Uneq Push Pull' in category \
                 or category == 'Unequipped  PP' \
                 or category == 'Unequipped PP':
                event = 'BD'
                equipment = 'Raw'
            elif 'Eq PP' in category \
                 or category == 'Equipped Push Pull' \
                 or category == 'Equipped PP':
                event = 'BD'
                equipment = 'Single-ply'
            elif 'Power Press' in category: # PowerClean-Bench
                event = 'B'
                equipment = 'Raw'

            elif category.lower() == 'men':
                pass

            else:
                error("Unknown category: \"%s\"" % (category))

        elif row[nameidx] and row[wtidx]:
            assert event != None
            assert equipment != None
            row[eventidx] = event
            row[equipmentidx] = equipment


def remove_category_rows(csv):
    nameidx = csv.index('Name')
    wtidx = csv.index('WeightClassLBS')

    def find_such_a_row(csv):
        for i,row in enumerate(csv.rows):
            if row[nameidx] and not row[wtidx]:
                return i
        return -1

    while True:
        i = find_such_a_row(csv)
        if i == -1:
            return
        del csv.rows[i]

# Round to two decimal places.
def internal_to_string(f):
    try:
        f = float(f)
        r = "{:.2f}".format(f)
        r = r.replace('.00','')
        if '.' in r and r[-1] == '0':
            r = r[:-1]
        return r
    except ValueError:
        return f


# TODO: Run the above function over all the Squat,Bench,Deadlift rows too.
def trim_numbers(csv, field):
    idx = csv.index(field)

    for row in csv.rows:
        num = internal_to_string(row[idx])
        if num == '0':
            num = ''
        row[idx] = num


def float2(s):
    try:
        return float(s)
    except ValueError:
        return 0


def recalculate_totals(csv):
    totalidx = csv.index('TotalKg')

    squatidx = csv.index('BestSquatKg')
    benchidx = csv.index('BestBenchKg')
    deadliftidx = csv.index('BestDeadliftKg')

    for row in csv.rows:
        total = float2(row[squatidx]) + float2(row[benchidx]) + float2(row[deadliftidx])
        row[totalidx] = internal_to_string(total)


# NASA doesn't like marking people as disqualified. If they entered an event
# but failed to complete all of the lifts, they're given the total of their successes.
# This fixes that.
def hunt_dqs(csv):
    squatidx = csv.index('BestSquatKg')
    benchidx = csv.index('BestBenchKg')
    deadliftidx = csv.index('BestDeadliftKg')
    totalidx = csv.index('TotalKg')
    eventidx = csv.index('Event')
    placeidx = csv.index('Place')

    for row in csv.rows:
        dq = False
        event = row[eventidx]

        if 'S' in event and not row[squatidx]:
            dq = True
        elif 'B' in event and not row[benchidx]:
            dq = True
        elif 'D' in event and not row[deadliftidx]:
            dq = True

        if dq:
            row[totalidx] = ''
            row[placeidx] = 'DQ'


def main(filename):
    csv = Csv(filename)

    # The first row was actually a data row, so the fieldnames are not set correctly.
    def findfieldnames(rows):
        for row in rows:
            if 'Name' in row and 'B.W.T' in row:
                return row
        error("Could not find fieldnames.")
    csv.rows.insert(0, csv.fieldnames)
    csv.fieldnames = findfieldnames(csv.rows)[:]

    while '' in csv.fieldnames:
        csv.remove_column_by_name('')

    # Remove some columns that don't get used.
    csv.remove_column_by_name("Tl. Lbs.")
    csv.remove_column_by_name("Coef")
    csv.remove_column_by_name("TL Coef")
    csv.remove_column_by_name("Best PC") # Power Clean.
    csv.remove_column_by_name("Best-C") # Curl.
    csv.remove_column_by_name("C-4ar") # Curl 4th attempt.

    aggregate_divisions(csv)
    rename_fields(csv)

    integrate_equipment_event(csv)
    remove_category_rows(csv)
    remove_restated_column_rows(csv)
    remove_empty_rows(csv)

    # Some totals included events like "Curl" and "Power Clean".
    recalculate_totals(csv)
    trim_numbers(csv, 'BestSquatKg')
    trim_numbers(csv, 'BestBenchKg')
    trim_numbers(csv, 'BestDeadliftKg')
    trim_numbers(csv, 'BodyweightLBS')
    trim_numbers(csv, 'WeightClassLBS')

    hunt_dqs(csv)

    if 'Sex' in csv.fieldnames:
        capitalize(csv, 'Sex')
    if 'State' in csv.fieldnames:
        capitalize(csv, 'State')

    csv.write(sys.stdout)


if __name__ == '__main__':
    main(sys.argv[1])
